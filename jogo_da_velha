
package gui_jogodavelha;

import java.util.Random;;        //Importação de biblioteca de randomização.
import javax.swing.JOptionPane;  //Importação de biblioteca para exibição de mensagens de alerta em interface gráfica.

class BloquearJogadasRealizadas extends Exception{ //Exceção criada para bloquear a jogada em posições que já estão preenchidas.  
    public BloquearJogadasRealizadas() {
    
    }
}

class jogadasRealizadas{
    static String[] jogadas = new String[9]; //Vetor de 9 posições que servirá para armazenar as jogadas realizadas. A partir dele iremos comparar o vencedor da partida.
}

public class TelaPrincipal extends javax.swing.JFrame {
    
    static boolean vitoria = false;     //Váriavel estática que definirá se houve vencedor.
    static boolean auxJogada = false;   //Váriavel booleana que auxilia o loop da partida que está acontecendo.
    int vitoriasJogador = 0;            //Contador de vitórios do usuário, a cada vitória, ela auto incrementa + 1
    int vitoriasComputador = 0;         //Contador de vitórios do computador, a cada vitória, ela auto incrementa + 1
    Random random = new Random();       //Instância de objeto do tipo Random que será utilizada para sortear a jogada do computador. 
    
    
    public void jogadaDoComputador(){
        boolean loop = true;    //Váriavel para controle da jogada automatizada do computador.
            while(loop){        //Enquanto for true, a jogada continua até que seja um sucesso.
                int posicaoJogada = random.nextInt(9);  //Sorteio de uma posição no vetor de 0 a 8.
                if(jogadasRealizadas.jogadas[posicaoJogada] == "X" || jogadasRealizadas.jogadas[posicaoJogada] == "O"){
                    continue;            //Caso a posição escolhida no sorteio já contenha "X" ou "O", há novamente o sorteio de posição.
                }else{
                    jogadasRealizadas.jogadas[posicaoJogada] = "O";  //Caso a posição sorteada esteja disponível, há a gravação da jogada no vejor.
                    //De acordo com a posição escolhida, condicionais abaixo servirão para exibição da jogada no tabuleiro de interface gráfica.
                    if(posicaoJogada == 0){
                        b1.setText("O");
                    }else if(posicaoJogada == 1){
                        b2.setText("O");
                    }else if(posicaoJogada == 2){
                        b3.setText("O");
                    }else if(posicaoJogada == 3){
                        b4.setText("O");
                    }else if(posicaoJogada == 4){
                        b5.setText("O");
                    }else if(posicaoJogada == 5){
                        b6.setText("O");
                    }else if(posicaoJogada == 6){
                        b7.setText("O");
                    }else if(posicaoJogada == 7){
                        b8.setText("O");
                    }else if(posicaoJogada == 8){
                        b9.setText("O");      
                    }
                    loop = false; //Se a jogada for realizada com sucesso, a váriavel recebe false e o loop termina.
                }
            }
        }
    
    public void bloquearBotes(){ //Método para bloquear os 9 botões de jogo.
        b1.setEnabled(false);
        b2.setEnabled(false);
        b3.setEnabled(false);
        b4.setEnabled(false);
        b5.setEnabled(false);
        b6.setEnabled(false);
        b7.setEnabled(false);
        b8.setEnabled(false);
        b9.setEnabled(false);
    }
    
    public void liberarBotoes(){  //Método para desbloquear os 9 botões de jogo.
        b1.setEnabled(true);
        b2.setEnabled(true);
        b3.setEnabled(true);
        b4.setEnabled(true);
        b5.setEnabled(true);
        b6.setEnabled(true);
        b7.setEnabled(true);
        b8.setEnabled(true);
        b9.setEnabled(true);
    }
    
    public void getVitoriasComputador(){ //Método para alterar a Jlabel na tela do programa informando a quantidade de vitórias do computador.
        jLabel6.setText(Integer.toString(vitoriasComputador));
    }
    
    public void getVitoriasJogador(){   //Método para alterar a Jlabel na tela do programa informando a quantidade de vitórias do usuário.
        jLabel5.setText(Integer.toString(vitoriasJogador));
    }
    
    public TelaPrincipal() {        
        initComponents();
        setLocationRelativeTo(null);                           //Ao iniciar o programa, iniciá-lo no centro da tela.
        setTitle("Jogo da velha_Trabalho de programação");     //Titulo da janela.
        setDefaultCloseOperation(EXIT_ON_CLOSE);               //Programa encerra junto como o fechar da janela.
        setResizable(false);                                   //Impossibilitar o redemensionamento da janela.
        setVisible(true);                                      //Deixar a janela principal do programa visivel.
    }
         
    public void limparTela(){  //Método para limpar a tela do programa, possibilitando um novo jogo.
        for(int i = 0; i < 9; i++){
                jogadasRealizadas.jogadas[i] = "";  //Sobreescreve o vetor que está com as jogadas da partida anterior gravadas.
           }
        b1.setText(""); 
        b2.setText("");
        b3.setText("");
        b4.setText("");
        b5.setText("");     //Zera as informações de jogadas efetuadas na partida anterior nos botôes.
        b6.setText("");
        b7.setText("");
        b8.setText("");
        b9.setText("");
    }
    
    public boolean verificarVencedor(){ //Método para verificar o vencedor da partida.
        
        if((jogadasRealizadas.jogadas[0] == "X" && jogadasRealizadas.jogadas[1] == "X" && jogadasRealizadas.jogadas[2] == "X")||//Checa linha 
           (jogadasRealizadas.jogadas[3] == "X" && jogadasRealizadas.jogadas[4] == "X" && jogadasRealizadas.jogadas[5] == "X")||//Checa linha 
           (jogadasRealizadas.jogadas[6] == "X" && jogadasRealizadas.jogadas[7] == "X" && jogadasRealizadas.jogadas[8] == "X")||//Checa linha 
           (jogadasRealizadas.jogadas[0] == "X" && jogadasRealizadas.jogadas[3] == "X" && jogadasRealizadas.jogadas[6] == "X")||//Checa coluna
           (jogadasRealizadas.jogadas[1] == "X" && jogadasRealizadas.jogadas[4] == "X" && jogadasRealizadas.jogadas[7] == "X")||//Checa coluna
           (jogadasRealizadas.jogadas[2] == "X" && jogadasRealizadas.jogadas[5] == "X" && jogadasRealizadas.jogadas[8] == "X")||//Checa coluna
           (jogadasRealizadas.jogadas[0] == "X" && jogadasRealizadas.jogadas[4] == "X" && jogadasRealizadas.jogadas[8] == "X")||//Checa diagonal
           (jogadasRealizadas.jogadas[2] == "X" && jogadasRealizadas.jogadas[4] == "X" && jogadasRealizadas.jogadas[6] == "X")){//Checa diagonal
                JOptionPane.showMessageDialog(null,"Jogador N° 01 venceu!"); //Caixa de diálogo informando o vencedor.
                vitoriasJogador++;    //Se o usuário vencer, o contador recebe +1.
                getVitoriasJogador(); //Método para atualizar o contador de vitórias do usuário na tela do programa.
                vitoria = true;      //Caso haja vitória, váriavel booleana que controla o loop da partida recebe true.   
                return vitoria;
        }else if((jogadasRealizadas.jogadas[0] == "O" && jogadasRealizadas.jogadas[1] == "O" && jogadasRealizadas.jogadas[2] == "O")||//Checa linha 
           (jogadasRealizadas.jogadas[3] == "O" && jogadasRealizadas.jogadas[4] == "O" && jogadasRealizadas.jogadas[5] == "O")||//Checa linha 
           (jogadasRealizadas.jogadas[6] == "O" && jogadasRealizadas.jogadas[7] == "O" && jogadasRealizadas.jogadas[8] == "O")||//Checa linha 
           (jogadasRealizadas.jogadas[0] == "O" && jogadasRealizadas.jogadas[3] == "O" && jogadasRealizadas.jogadas[6] == "O")||//Checa coluna
           (jogadasRealizadas.jogadas[1] == "O" && jogadasRealizadas.jogadas[4] == "O" && jogadasRealizadas.jogadas[7] == "O")||//Checa coluna
           (jogadasRealizadas.jogadas[2] == "O" && jogadasRealizadas.jogadas[5] == "O" && jogadasRealizadas.jogadas[8] == "O")||//Checa coluna
           (jogadasRealizadas.jogadas[0] == "O" && jogadasRealizadas.jogadas[4] == "O" && jogadasRealizadas.jogadas[8] == "O")||//Checa diagonal
           (jogadasRealizadas.jogadas[2] == "O" && jogadasRealizadas.jogadas[4] == "O" && jogadasRealizadas.jogadas[6] == "O")){//Checa diagonal
                JOptionPane.showMessageDialog(null,"Jogador N° 02 venceu!"); //Caixa de diálogo informando o vencedor.
                vitoriasComputador++;    //Se o computador vencer, o contador recebe +1.
                getVitoriasComputador(); //Método para atualizar o contador de vitórias do computador na tela do programa.
                vitoria = true;         //Caso haja vitória, váriavel booleana que controla o loop da partida recebe true.    
                return vitoria;         //Return true.
        }
            return vitoria;  //Retorna false por padrão.
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        b2 = new javax.swing.JButton();
        b1 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        b5 = new javax.swing.JButton();
        b4 = new javax.swing.JButton();
        b6 = new javax.swing.JButton();
        b8 = new javax.swing.JButton();
        b7 = new javax.swing.JButton();
        b9 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        b2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b3.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        b5.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b5ActionPerformed(evt);
            }
        });

        b4.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        b6.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        b6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });

        b8.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        b8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b8ActionPerformed(evt);
            }
        });

        b7.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        b7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b7ActionPerformed(evt);
            }
        });

        b9.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        b9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b9ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Novo jogo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Player:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Computador:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText(" ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText(" ");

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("Sobre");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Placar geral:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setText("Sair");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Jogador = X          Computador = O");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addComponent(jLabel7)
                                .addGap(178, 178, 178))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(58, 58, 58))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addGap(12, 12, 12)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(10, 10, 10)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(620, Short.MAX_VALUE)
                    .addComponent(jLabel10)
                    .addGap(92, 92, 92)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addGap(28, 28, 28))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(203, 203, 203)
                    .addComponent(jLabel10)
                    .addContainerGap(277, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        
        
    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            if(jogadasRealizadas.jogadas[1] == "X" || jogadasRealizadas.jogadas[1] == "O"){
                throw new BloquearJogadasRealizadas(); //Caso a posição escolhida já esteja marcado com X ou O, o catch captura o erro e impede a jogada.
            }
            b2.setText("X"); //Caso não haja erro, a jogada prossegue normalmente.
            jogadasRealizadas.jogadas[1] = "X"; //Grava-se no vetor de jogadas a posição escolhida
            auxJogada = true; //Aux recebe true;
        }catch(BloquearJogadasRealizadas e){
            JOptionPane.showMessageDialog(null,"Posição de jogada indisponível!");
        }
    }                                  

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            if(jogadasRealizadas.jogadas[0] == "X" || jogadasRealizadas.jogadas[0] == "O"){
                throw new BloquearJogadasRealizadas(); //Caso a posição escolhida já esteja marcado com X ou O, o catch captura o erro e impede a jogada.
            }
            b1.setText("X"); //Caso não haja erro, a jogada prossegue normalmente.
            jogadasRealizadas.jogadas[0] = "X"; //Grava-se no vetor de jogadas a posição escolhida
            auxJogada = true; //Aux recebe true;
        }catch(BloquearJogadasRealizadas e){
            JOptionPane.showMessageDialog(null,"Posição de jogada indisponível!");
        }
    }                                  

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            if(jogadasRealizadas.jogadas[2] == "X" || jogadasRealizadas.jogadas[2] == "O"){
                throw new BloquearJogadasRealizadas(); //Caso a posição escolhida já esteja marcado com X ou O, o catch captura o erro e impede a jogada.
            }
            b3.setText("X"); //Caso não haja erro, a jogada prossegue normalmente.
            jogadasRealizadas.jogadas[2] = "X"; //Grava-se no vetor de jogadas a posição escolhida
            auxJogada = true; //Aux recebe true;
        }catch(BloquearJogadasRealizadas e){
            JOptionPane.showMessageDialog(null,"Posição de jogada indisponível!");
        }
    }                                  

    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            if(jogadasRealizadas.jogadas[3] == "X" || jogadasRealizadas.jogadas[3] == "O"){
                throw new BloquearJogadasRealizadas(); //Caso a posição escolhida já esteja marcado com X ou O, o catch captura o erro e impede a jogada.
            }
            b4.setText("X"); //Caso não haja erro, a jogada prossegue normalmente.
            jogadasRealizadas.jogadas[3] = "X"; //Grava-se no vetor de jogadas a posição escolhida
            auxJogada = true;  //Aux recebe true;
        }catch(BloquearJogadasRealizadas e){
            JOptionPane.showMessageDialog(null,"Posição de jogada indisponível!");
        }
    }                                  

    private void b5ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            if(jogadasRealizadas.jogadas[4] == "X" || jogadasRealizadas.jogadas[4] == "O"){
                throw new BloquearJogadasRealizadas(); //Caso a posição escolhida já esteja marcado com X ou O, o catch captura o erro e impede a jogada.
            }
            b5.setText("X"); //Caso não haja erro, a jogada prossegue normalmente.
            jogadasRealizadas.jogadas[4] = "X"; //Grava-se no vetor de jogadas a posição escolhida
            auxJogada = true; //Aux recebe true;
        }catch(BloquearJogadasRealizadas e){
            JOptionPane.showMessageDialog(null,"Posição de jogada indisponível!");
        }
    }                                  

    private void b6ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            if(jogadasRealizadas.jogadas[5] == "X" || jogadasRealizadas.jogadas[5] == "O"){
                throw new BloquearJogadasRealizadas(); //Caso a posição escolhida já esteja marcado com X ou O, o catch captura o erro e impede a jogada.
            }
            b6.setText("X"); //Caso não haja erro, a jogada prossegue normalmente.
            jogadasRealizadas.jogadas[5] = "X"; //Grava-se no vetor de jogadas a posição escolhida
            auxJogada = true; //Aux recebe true;
        }catch(BloquearJogadasRealizadas e){
            JOptionPane.showMessageDialog(null,"Posição de jogada indisponível!");
        }
    }                                  

    private void b7ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            if(jogadasRealizadas.jogadas[6] == "X" || jogadasRealizadas.jogadas[6] == "O"){
                throw new BloquearJogadasRealizadas(); //Caso a posição escolhida já esteja marcado com X ou O, o catch captura o erro e impede a jogada.
            }
            b7.setText("X"); //Caso não haja erro, a jogada prossegue normalmente.
            jogadasRealizadas.jogadas[6] = "X"; //Grava-se no vetor de jogadas a posição escolhida
            auxJogada = true; //Aux recebe true;
        }catch(BloquearJogadasRealizadas e){
            JOptionPane.showMessageDialog(null,"Posição de jogada indisponível!");
        }
    }                                  

    private void b8ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            if(jogadasRealizadas.jogadas[7] == "X" || jogadasRealizadas.jogadas[7] == "O"){
                throw new BloquearJogadasRealizadas(); //Caso a posição escolhida já esteja marcado com X ou O, o catch captura o erro e impede a jogada.
            }
            b8.setText("X"); //Caso não haja erro, a jogada prossegue normalmente.
            jogadasRealizadas.jogadas[7] = "X"; //Grava-se no vetor de jogadas a posição escolhida.
            auxJogada = true; //Aux recebe true;
        }catch(BloquearJogadasRealizadas e){
            JOptionPane.showMessageDialog(null,"Posição de jogada indisponível!");
        }
    }                                  

    private void b9ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        try{
            if(jogadasRealizadas.jogadas[8] == "X" || jogadasRealizadas.jogadas[8] == "O"){ 
                throw new BloquearJogadasRealizadas(); //Caso a posição escolhida já esteja marcado com X ou O, o catch captura o erro e impede a jogada.
            }
            b9.setText("X");   //Caso não haja erro, a jogada prossegue normalmente.
            jogadasRealizadas.jogadas[8] = "X"; //Grava-se no vetor de jogadas a posição escolhida.
            auxJogada = true;  //Aux recebe true;
        }catch(BloquearJogadasRealizadas e){ 
            JOptionPane.showMessageDialog(null,"Posição de jogada indisponível!");
        }
    }                                  

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        limparTela();     //Limpa o tabuleiro.
        liberarBotoes();  //Libera os botões do tabuleiro
        JOptionPane.showMessageDialog(null, "Novo jogo iniciado!"); //Informa que um novo jogo irá iniciar
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
            JOptionPane.showMessageDialog(null,"DESENVOLVIDO POR:\nGlayson Visgueira\nNatan Cardoso\nMariana Barbosa\nRonaldinho Silva\nFernando Custódio");
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
         if(vitoriasJogador > vitoriasComputador){       //Saída caso o jogador tenha tido mais vitórias que o computador.
             JOptionPane.showMessageDialog(null,"O programa será encerrado!\n\nParcial dos jogos:\nJogador: " + vitoriasJogador + "\nComputador: " + vitoriasComputador + "\n\nUsuário foi o vencedor!");
         }else if(vitoriasComputador > vitoriasJogador){ //Saída caso o computador tenha tido mais vitórias que o usuário.
             JOptionPane.showMessageDialog(null,"O programa será encerrado!\n\nParcial dos jogos:\nJogador: " + vitoriasJogador + "\nComputador: " + vitoriasComputador + "\n\nComputador foi o vencedor!");
         }else if(vitoriasComputador == vitoriasJogador){ //Saída caso o jogo tenha dado empate.
             JOptionPane.showMessageDialog(null,"O programa será encerrado!\n\nParcial dos jogos:\nJogador: " + vitoriasJogador + "\nComputador: " + vitoriasComputador + "\n\nJogador e computador empataram!");
         }
         System.exit(0);  //Sair do programa principal.
    }                                        

  
    public static void main(String args[]) {
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       

        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
        
        TelaPrincipal jogo = new TelaPrincipal(); //Instanciando o frame.
        
        while(true){                 //Loop de jogada infinito.
            jogo.limparTela();       //Método para limpar o tabuleiro.
            vitoria = false;         //A cada loop o controlador de vitória recebe false novamente.  
           while(jogo.verificarVencedor() == false){ //Enquanto o método verificarVencedor estiver falso o loop continua.
                
                if(auxJogada == true){          //A cada click no botão do tabuleiro, auxJogada recebe true, entra-se então no condicional para o computador randomizar sua jogada.
                    auxJogada = false;          //auxJogada é setado em false novamente. 
                    jogo.jogadaDoComputador();  //Chamada ao método que realiza a jogada do computador.
                }     
            }
                    jogo.bloquearBotes();       //Quando houver vitória o tabuleiro é bloqueado para evitar que o usuário continue escolhendo posições válidas.
        }   
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JButton b5;
    private javax.swing.JButton b6;
    private javax.swing.JButton b7;
    private javax.swing.JButton b8;
    private javax.swing.JButton b9;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration                   
}
